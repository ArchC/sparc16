/*
 *  Modifiers for SPARC16
 */

/*
 *  Generic Branch and call modifiers
 */
ac_modifier_encode(pcrelx)
{
  /*
   * The address is aligned on 4 byte boundary
   * NOTE: the compiler *must* issue a nop before each
   * instruction containing a pcrelx relocation, cause
   * the difference computed below must be 4 byte aligned
   */
  reloc->output = reloc->input - reloc->address;
  if (reloc->output % 4 != 0)
    reloc->error = 1;
  reloc->ouput >>= 2;
}

ac_modifier_decode(pcrelx)
{
  reloc->output = (reloc->input << 2) + reloc->address;
}

/// PC-relative relocation, used by formats I, I2, XCHG
ac_modifier_encode(pcrel)
{
  // The address is aligned on 2 byte boundary
  reloc->output = (reloc->input - reloc->address) >> 1;
}

ac_modifier_decode(pcrel)
{
  reloc->output = (reloc->input << 1) + reloc->address;
}

/*
 *  PC-relative extended instructions aren't correctly encoded
 *  by ArchC provided encoder functions. Provide our handcoded
 *  ones.
 */
ac_modifier_encode(pcrelextcallx)
{
  /*
   * The address is aligned on 4 byte boundary
   * NOTE: the compiler *must* issue a nop before each
   * instruction containing a pcrelx relocation, cause
   * the difference computed below must be 4 byte aligned
   */
  reloc->output = reloc->input - reloc->address;
  if (reloc->output % 4 != 0)
    reloc->error = 1;
  reloc->ouput >>= 2;
  reloc->Type_EXT_I.simm11 = reloc->output & 0x7ff;
  reloc->Type_EXT_I.immext11 = (reloc->output >> 11) & 0x7ff;
  reloc->output = 0; // use Type_XXX info instead of "output"
}

ac_modifier_decode(pcrelextcallx)
{
  reloc->output = (reloc->input << 2) + reloc->address;
}

ac_modifier_encode(pcrelextbrx)
{
  /*
   * The address is aligned on 4 byte boundary
   * NOTE: the compiler *must* issue a nop before each
   * instruction containing a pcrelx relocation, cause
   * the difference computed below must be 4 byte aligned
   */
  reloc->output = reloc->input - reloc->address;
  if (reloc->output % 4 != 0)
    reloc->error = 1;
  reloc->ouput >>= 2;
  reloc->Type_EXT_I2.simm9 = reloc->output & 0x1ff;
  reloc->Type_EXT_I2.immext11 = (reloc->output >> 9) & 0x7ff;
  reloc->output = 0; // use Type_XXX info instead of "output"
}

ac_modifier_decode(pcrelextbrx)
{
  reloc->output = (reloc->input << 2) + reloc->address;
}

ac_modifier_encode(pcrelextii)
{
  // The address is aligned on 2 byte boundary
  reloc->output = (reloc->input - reloc->address) >> 1;
  reloc->Type_EXT_I2.simm8 = reloc->output & 0xff;
  reloc->Type_EXT_I2.immext11 = (reloc->output >> 8) & 0x7ff;
  reloc->output = 0; // use Type_XXX info instead of "output"
}

ac_modifier_decode(pcrelextii)
{
  reloc->output = (reloc->input << 1) + reloc->address;
}

ac_modifier_encode(pcrelexti)
{
  // The address is aligned on 2 byte boundary
  reloc->output = (reloc->input - reloc->address) >> 1;
  reloc->Type_EXT_I.simm10 = reloc->output & 0x3ff;
  reloc->Type_EXT_I.immext11 = (reloc->output >> 10) & 0x7ff;
  reloc->output = 0; // use Type_XXX info instead of "output"
}

ac_modifier_decode(pcrelexti)
{
  reloc->output = (reloc->input << 1) + reloc->address;
}

ac_modifier_encode(pcrelexticall)
{
  // The address is aligned on 2 byte boundary
  reloc->output = (reloc->input - reloc->address) >> 1;
  reloc->Type_EXT_I.simm11 = reloc->output & 0x7ff;
  reloc->Type_EXT_I.immext11 = (reloc->output >> 11) & 0x7ff;
  reloc->output = 0; // use Type_XXX info instead of "output"
}

ac_modifier_decode(pcrelexticall)
{
  reloc->output = (reloc->input << 1) + reloc->address;
}

/*
 *  Pure immediate modifiers
 */

/// %lo handling for Type_RI
ac_modifier_encode(lowri)
{
  reloc->Type_RI.simm8 = reloc->input & 0xff;
}

ac_modifier_decode(lowri)
{
  unsigned int insn = (unsigned)reloc->addend;
  reloc->output = (int)((insn >> 3) & 0xff);
}

/// %lo handling for Type_EXT_RI
ac_modifier_encode(lowextri)
{
  // The total imm is 13 bits, but relocation uses 10
  reloc->Type_EXT_RI.simm8 = reloc->input & 0xff;
  reloc->Type_EXT_RI.immext5 = (reloc->input >> 3) & 0x1f;
}

ac_modifier_decode(lowextri)
{
  unsigned int insn = (unsigned)reloc->addend;
  unsigned int hi = ((insn >> 16) & 0x1f) << 8;
  unsigned int low = (insn >> 3) & 0xff;
  reloc->output = (int)(hi | low);
}

/// %hi handling for Type_RI
ac_modifier_encode(highri)
{
  reloc->Type_RI.imm8 = reloc->input >> 24;
}

ac_modifier_decode(highri)
{
  unsigned int insn = (unsigned)reloc->addend;
  reloc->output = ((insn >> 3) & 0xff) << 8;
}

/// %hi handling for Type_EXT_RI
ac_modifier_encode(highextri)
{
  reloc->Type_SETHI.imm22 = reloc->input >> 10;
}

ac_modifier_decode(highextri)
{
  unsigned int insn = (unsigned)reloc->addend;
  unsigned int high = (insn >> 3) & 0x3fffff;
  reloc->output = high << 10;
}

/// %lo handling for Type_RRI
ac_modifier_encode(lowrri)
{
  reloc->Type_RRI.simm5 = reloc->input & 0x1f;
}

ac_modifier_decode(lowrri)
{
  unsigned int insn = (unsigned)reloc->addend;
  reloc->output = (int)((insn >> 6) & 0x1f);
}

ac_modifier_encode(lowrris)
{
  reloc->Type_RRI.imm5 = reloc->input & 0x1f;
}

ac_modifier_decode(lowrris)
{
  unsigned int insn = (unsigned)reloc->addend;
  reloc->output = (int)((insn >> 6) & 0x1f);
}

/// %lo handling for Type_EXT_RRI
ac_modifier_encode(lowextrri)
{
  // The total imm is 13 bits, but relocation uses 10
  reloc->Type_EXT_RRI.simm5 = reloc->input & 0x1f;
  reloc->Type_EXT_RRI.immext8 = (reloc->input >> 5) & 0x1f;
}

ac_modifier_decode(lowextrri)
{
  unsigned int insn = (unsigned)reloc->addend;
  unsigned int hi = ((insn >> 16) & 0xff) << 5;
  unsigned int low = ((insn >> 6) & 0x1f);
  reloc->output = (int)(hi | low);
}

/// %lo handling for Type_RI2
ac_modifier_encode(lowriri)
{
  reloc->Type_RI2.simm5 = reloc->input & 0x1f;
}

ac_modifier_decode(lowriri)
{
  unsigned int insn = (unsigned)reloc->addend;
  reloc->output = (int)((insn >> 3) & 0x1f);
}

/// %lo handling for Type_EXT_RI2
ac_modifier_encode(lowextriri)
{
  // The total imm is 13 bits, but relocation uses 10
  reloc->Type_EXT_RI2.simm5 = reloc->input & 0x1f;
  reloc->Type_EXT_RI2.immext8 = (reloc->input >> 5) & 0xff;
}

ac_modifier_decode(lowextriri)
{
  unsigned int insn = (unsigned)reloc->addend;
  unsigned int hi = ((insn >> 16) & 0xff) << 5;
  unsigned int low = (insn >> 3) & 0x1f;
  reloc->output = (int)(hi | low);
}

/// %lo handling for Type_RRI2
ac_modifier_encode(lowrrirri)
{
  reloc->Type_RRI2.simm2 = reloc->input & 0x3;
}

ac_modifier_decode(lowrrirri)
{
  unsigned int insn = (unsigned)reloc->addend;
  reloc->output = (int)((insn >> 6) & 0x3);
}

/// %lo handling for Type_EXT_RRI2
ac_modifier_encode(lowextrrirri)
{
  // The total imm is 13 bits, but relocation uses 10
  reloc->Type_EXT_RRI2.simm2 = reloc->input & 0x3;
  reloc->Type_EXT_RRI2.immext11 = (reloc->input >> 2) & 0xff;
}

ac_modifier_decode(lowextrrirri)
{
  unsigned int insn = (unsigned)reloc->addend;
  unsigned int hi = ((insn >> 16) & 0x7ff) << 2;
  unsigned int low = ((insn >> 6) & 0x3);
  reloc->output = (int)(hi | low);
}


/// %lo handling for Type_EXT_LDST
ac_modifier_encode(lowextldst)
{
  // The total imm is 13 bits, but relocation uses 10
  reloc->Type_EXT_LDST.simm4 = reloc->input & 0x0f;
  reloc->Type_EXT_LDST.immext9 = (reloc->input >> 4) & 0x0f;
}

ac_modifier_decode(lowextldst)
{
  unsigned int insn = (unsigned)reloc->addend;
  unsigned int hi = ((insn >> 16) & 0x1ff) << 4;
  unsigned int low = ((insn >> 6) & 0x0f);
  reloc->output = (int)(hi | low);
}

/// %lo handling for Type_LDST
ac_modifier_encode(lowldst)
{
  reloc->Type_LDST.simm4 = reloc->input & 0x0f;
}

ac_modifier_decode(lowldst)
{
  unsigned int insn = (unsigned)reloc->addend;
  reloc->output = (int)((insn >> 6) & 0x0f);
}

