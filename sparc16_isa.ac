/**
 * @file      sparc16_isa.ac
 * @author    Sandro Rigo
 *            Marcus Bartholomeu
 *            Alexandro Baldassin (assembly information)
 *
 *            The ArchC Team
 *            http://www.archc.org/
 *
 *            Computer Systems Laboratory (LSC)
 *            IC-UNICAMP
 *            http://www.lsc.ic.unicamp.br
 *
 * @version   1.0
 * @date      Thu, 29 Jun 2006 14:49:07 -0300
 * 
 * @brief     The ArchC SPARC-V8 functional model.
 * 
 * @attention Copyright (C) 2002-2006 --- The ArchC Team
 * 
 * This program is free software; you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation; either version 2 of the License, or 
 * (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 */

AC_ISA(sparc16){

  /* The sparc16 isa has the sparcv8 instruction while in 32 bit mode and
   * the 16 bit instruction set whilst in 16 bit mode. That said, we describe
   * both ISAs, so the assembler and linker are generated for both */

  /* SPARCv8 Formats */
 
  //ac_format Type_F1   = "%op:2 %disp30:30";
  //ac_format Type_F2A 	= "%op:2 %rd:5 %op2:3 %imm22:22";
  //ac_format Type_F2B 	= "%op:2 %an:1 %cond:4 %op2:3 %disp22:22:s";
  //ac_format Type_F3A 	= "%op:2 %rd:5 %op3:6 %rs1:5 %is:1 %asi:8 %rs2:5";
  //ac_format Type_F3B 	= "%op:2 %rd:5 %op3:6 %rs1:5 %is:1 %simm13:13:s";
  ///* format for trap instructions */
  //ac_format Type_FT   = "%op:2 %r1:1 %cond:4 %op2a:6 %rs1:5 %is:1 [%r2a:8 %rs2:5 | %r2b:6 %imm7:7]";

  //ac_instr<Type_F1>  call;
  //ac_instr<Type_F2A> nop, sethi;
  //ac_instr<Type_F2B> ba, bn, bne, be, bg, ble, bge, bl, bgu, bleu, bcc, bcs,
  //                   bpos, bneg, bvc, bvs;

  //ac_instr<Type_F3A> ldsb_reg, ldsh_reg, ldub_reg, lduh_reg, ld_reg, ldd_reg,
  //                   stb_reg, sth_reg, st_reg, std_reg, ldstub_reg, swap_reg,
  //                   sll_reg, srl_reg, sra_reg, add_reg, addcc_reg, addx_reg,
  //                   addxcc_reg, sub_reg, subcc_reg, subx_reg, subxcc_reg,
  //                   and_reg, andcc_reg, andn_reg, andncc_reg, or_reg, orcc_reg,
  //                   orn_reg, orncc_reg, xor_reg, xorcc_reg, xnor_reg,
  //                   xnorcc_reg, save_reg, restore_reg, umul_reg, smul_reg,
  //                   umulcc_reg, smulcc_reg, mulscc_reg, udiv_reg, udivcc_reg,
  //                   sdiv_reg, sdivcc_reg, jmpl_reg, wry_reg;

  //ac_instr<Type_F3B> ldsb_imm, ldsh_imm, ldub_imm, lduh_imm, ld_imm, ldd_imm,
  //                   and_imm, andcc_imm, andn_imm, andncc_imm, or_imm, orcc_imm,
  //                   orn_imm, orncc_imm, xor_imm, xorcc_imm, xnor_imm,
  //                   xnorcc_imm, umul_imm, smul_imm, umulcc_imm, smulcc_imm,
  //                   mulscc_imm, udiv_imm, udivcc_imm, sdiv_imm, sdivcc_imm;

  //ac_instr<Type_F3B> stb_imm, sth_imm, st_imm, std_imm, ldstub_imm, swap_imm,
  //                   sll_imm, srl_imm, sra_imm, add_imm, addcc_imm, addx_imm,
  //                   addxcc_imm, sub_imm, subcc_imm, subx_imm, subxcc_imm,
  //                   jmpl_imm, save_imm, restore_imm, rdy, wry_imm;

  //ac_instr<Type_F2A> unimplemented;
  //ac_instr<Type_FT>  trap_reg, trap_imm;

  /* 
   * SPARC16 Formats and Instructions
   * TODO: check better if for extendend signed, both (immext and immXX) need ":s"
   */

  // Format by the instruction which exchange to 16 bit mode.
  ac_format Type_XCHG = "%op:2 %unused:5 %op3:6 %disp19:19"; // Based on Type_F3B
  ac_format Type_I    = "%op:5 [ %imm11:11 | %simm11:11:s ]";
  ac_format Type_RI   = "%op:5 [ %imm8:8 | %simm8:8:s ] %rd:3";
  ac_format Type_RRI  = "%op:5 %simm5:5:s %rs:3 %rd:3";
  ac_format Type_I2   = "%op:5 [ %cond:2 %an:1 %simm8:8:s | %op2:2 %t:1 %reg32:5 %reg8:3 | %op3:2 %simm9:9:s ]";
  ac_format Type_RI2  = "%op:5 %op2:2 %simm6:6 %rd:3";
  ac_format Type_RRI2 = "%op:5 %op2:3 %simm2:2 %rs:3 %rd:3";
  ac_format Type_RR   = "%op:5 %op2:5 %rs:3 %rd:3";
  ac_format Type_RRR2 = "%op:5 %op2:2 %rs2:3 %rs1:3 %rd:3";

  ac_format Type_EXT_I    = "%opext:5 %immext:11 %op:5 [ %imm11:11 | %simm11:11:s ]";
  ac_format Type_EXT_RI   = "%opext:5 %immext:11 %op:5 [ %imm8:8 | %simm8:8:s ] %rd:3";
  ac_format Type_EXT_RRI  = "%opext:5 %immext:11:s %op:5 %simm5:5:s %rs:3 %rd:3";
  ac_format Type_EXT_I2   = "%opext:5 %immext:11:s %op:5 [ %cond:2 %an:1 %simm8:8:s | %op2:2 %t:1 %reg32:5 %reg8:3 | %op3:2 %simm9:9:s ]";
  ac_format Type_EXT_RI2  = "%opext:5 %immext:11 %op:5 %op2:2 %simm6:6 %rd:3";
  ac_format Type_EXT_RRI2 = "%opext:5 %immext:11 %op:5 %op2:3 %simm2:2 %rs:3 %rd:3";
  ac_format Type_EXT_RR   = "%opext:5 %immext:8 %rsext:3 %op:5 %op2:5 %rs:3 %rd:3";

  ac_instr<Type_XCHG> sparcv8bx;

  ac_instr<Type_I> b16, be16, bne16, call16;
  ac_instr<Type_EXT_I> e_b16, e_be16, e_bne16, e_call16;

  ac_instr<Type_RI> cmp16, mov16, sethi16;
  ac_instr<Type_EXT_RI> e_cmp16, e_mov16, e_sethi16;

  ac_instr<Type_RRI> add16, and16, ld16, st16, ldd16, std16, sra16, srl16, sll16; 
  ac_instr<Type_EXT_RRI> e_add16, e_and16, e_ld16, e_st16, e_ldd16, e_std16, e_sra16, e_srl16, e_sll16;

  ac_instr<Type_I2> mov8to3216, mov32to816, savesp16, bn16, bg16, ble16, bge16, bl16, bgu16, 
                    bleu16, bcc16, bcs16, bpos16, bneg16, bvc16, bvs16, sparc16bx;
  ac_instr<Type_EXT_I2> e_mov8to3216, e_mov32to816, e_savesp16, e_bn16, e_bg16, e_ble16, e_bge16, 
                    e_bl16, e_bgu16, e_bleu16, e_bcc16, e_bcs16, e_bpos16, e_bneg16, e_bvc16, e_bvs16,
                    e_sparc16bx;

  ac_instr<Type_RI2> addfp, stfp, ldfp, addsp, stsp, ldsp, btst16, clrw_imm16;
  ac_instr<Type_EXT_RI2> e_addfp, e_stfp, e_ldfp, e_addsp, e_stsp, e_ldsp, e_btst16, e_clrw_imm16;

  ac_instr<Type_RRI2> addx16, subx16, stb16, sth16, ldsb16, ldsh16, ldub16, lduh16, smul16, 
                      sdiv16, umul16, udiv16, or16, xor16, orn16, xnor16;
  ac_instr<Type_EXT_RRI2> e_addx16, e_subx16, e_stb16, e_sth16, e_ldsb16, e_ldsh16, e_ldub16, e_lduh16, 
                          e_smul16, e_sdiv16, e_umul16, e_udiv16, e_or16, e_xor16, e_orn16, e_xnor16;

  ac_instr<Type_RR> addx_reg16, subx_reg16, btst_reg16, clrw16, clrb16, clrh16, cmp_reg16, 
                    stb_reg16, sth_reg16, std_reg16, lduh_reg16, ldub_reg16, ldd_reg16, ldsb_reg16, 
                    ldsh_reg16, sra_reg16, srl_reg16, sll_reg16, orn_reg16, xnor_reg16, 
                    andn_reg16, neg_reg16, restore16, rd16, wr16, callr, jmpr, ret, retl, trestore, nop;
  ac_instr<Type_EXT_RR> e_addx_reg16, e_subx_reg16, e_btst_reg16, e_clrw16, e_clrb16, e_clrh16, 
                    e_cmp_reg16, e_stb_reg16, e_sth_reg16, e_std_reg16, e_lduh_reg16, e_ldub_reg16, 
                    e_ldd_reg16, e_ldsb_reg16, e_ldsh_reg16, e_sra_reg16, e_srl_reg16, e_sll_reg16, 
                    e_orn_reg16, e_xnor_reg16, e_andn_reg16, e_neg_reg16, e_restore16;

  ac_instr<Type_RRR2> add_reg16, sub_reg16, and_reg16, or_reg16, smul_reg16, sdiv_reg16, 
                      umul_reg16, udiv_reg16, st_reg16, ld_reg16, xor_reg16;

  ac_asm_map reg { 
      "%r"[0..31] = [0..31];
      "%g"[0..7] = [0..7];
      "%o"[0..7] = [8..15];
      "%l"[0..7] = [16..23];
      "%i"[0..7] = [24..31];
      "%fp" = 30;
      "%sp" = 14;
  }

  // The registers defined below can only be used by 
  // instructions running on priviledged mode.
  ac_asm_map prv_reg {
    "%y"   = 0;
    "%psr" = 1;
    "%wim"  = 2;
    "%tbr"  = 3;
  }

  ac_asm_map anul {
      "" = 0;
      ",a" = 1;   
  }

  //ac_asm_map cond {
  //  "a"   = 8;
  //  "n"   = 0;
  //  "ne"  = 5;
  //  "e"   = 1;
  //  "g"   = 10;
  //  "le"  = 2;
  //  "ge"  = 11;
  //  "l"   = 3;
  //  "gu"  = 12;
  //  "leu" = 4;
  //  "cc"  = 13;
  //  "cs"  = 5;
  //  "pos" = 14;
  //  "neg" = 6;
  //  "vc"  = 15;
  //  "vs"  = 7;
  //}

  ISA_CTOR(sparc16){

    /// SPARC16 Encoding and asm patterns
    
    /// Format XCHG
    sparcv8bx.set_asm("sparcv8bx %exp(pcreli)", disp19);
    sparcv8bx.set_decoder(op=0x2, op3=0x19);

    /// Format I and EXT_I
    b16.set_asm("b16 %exp(pcreli)", simm11);
    b16.set_decoder(op=0x08);
    e_b16.set_asm("eb16 %exp(pcreli)", simm11+immext);
    e_b16.set_decoder(opext=0x0b, op=0x08);

    be16.set_asm("be16 %exp(pcreli)", simm11);
    be16.set_decoder(op=0x01);
    e_be16.set_asm("ebe16 %exp(pcreli)", simm11+immext);
    e_be16.set_decoder(opext=0x0b, op=0x01);

    bne16.set_asm("bne16 %exp(pcreli)", simm11);
    bne16.set_decoder(op=0x09);
    e_bne16.set_asm("ebne16 %exp(pcreli)", simm11+immext);
    e_bne16.set_decoder(opext=0x0b, op=0x09);

    call16.set_asm("call16 %exp(pcreli)", imm11);
    call16.set_decoder(op=0x00);
    e_call16.set_asm("ecall16 %exp(pcreli)", imm11+immext);
    e_call16.set_decoder(opext=0x0b, op=0x00);

    /// Format RI, EXT_RI
    cmp16.set_asm("cmp16 %reg, %imm", rd, simm8);
    cmp16.set_decoder(op=0x0d);
    e_cmp16.set_asm("ecmp16 %reg, %imm(immextri)", rd, simm8+immext);
    e_cmp16.set_decoder(opext=0x0b, op=0x0d);

    mov16.set_asm("mov16 %imm, %reg", simm8, rd);
    mov16.set_decoder(op=0xe);
    e_mov16.set_asm("emov16 %imm(immextri), %reg", simm8+immext, rd);
    e_mov16.set_decoder(opext=0x0b, op=0xe);
    
    sethi16.set_asm("sethi16 %exp, %reg", imm8, rd);
    sethi16.set_asm("sethi16 \%hi(%exp(highri)), %reg", imm8, rd);
    sethi16.set_decoder(op=0x4);
    e_sethi16.set_asm("esethi16 %exp, %reg", imm8, rd);
    e_sethi16.set_asm("esethi16 \%hi(%exp(highextri)), %reg", imm8+immext, rd);
    e_sethi16.set_decoder(opext=0x0b, op=0x4);

    /// Format RRI and EXT_RRI
    add16.set_asm("add16 %reg, %imm, %reg", rs, simm5, rd);
    add16.set_asm("add16 %reg, \%lo(%exp(lowrri)), %reg", rs, simm5, rd);
    add16.set_decoder(op=0x2);
    e_add16.set_asm("eadd16 %reg, %imm(immextrri), %reg", rs, simm5+immext, rd);
    e_add16.set_asm("eadd16 %reg, \%lo(%exp(lowextrri)), %reg", rs, simm5+immext, rd);
    e_add16.set_decoder(opext=0x0b, op=0x2);

    and16.set_asm("and16 %reg, %imm, %reg", rs, simm5, rd);
    and16.set_decoder(op=0x3);
    e_and16.set_asm("eand16 %reg, %imm(immextrri), %reg", rs, simm5+immext, rd);
    e_and16.set_decoder(opext=0x0b, op=0x3);

    ld16.set_asm("ld16 [%reg + \%lo(%exp(lowrri))], %reg", rs, simm5, rd);
    ld16.set_asm("ld16 [%reg + %imm], %reg", rs, simm5, rd);
    ld16.set_asm("ld16 [%imm + %reg], %reg", simm5, rs, rd);
    ld16.set_decoder(op=0x18);
    e_ld16.set_asm("eld16 [%reg + \%lo(%exp(lowextrri))], %reg", rs, simm5+immext, rd);
    e_ld16.set_asm("eld16 [%reg + %imm(immextrri)], %reg", rs, simm5+immext, rd);
    e_ld16.set_asm("eld16 [%imm(immextrri) + %reg], %reg", simm5+immext, rs, rd);
    e_ld16.set_decoder(opext=0x0b, op=0x18);

    st16.set_asm("st16 %reg, [%reg + \%lo(%exp(lowrri))]", rd, rs, simm5);
    st16.set_asm("st16 %reg, [%reg + %imm]", rd, rs, simm5);
    st16.set_asm("st16 %reg, [%imm + %reg]", rd, simm5, rs);
    st16.set_decoder(op=0xc);
    e_st16.set_asm("est16 %reg, [%reg + \%lo(%exp(lowextrri))]", rd, rs, simm5+immext);
    e_st16.set_asm("est16 %reg, [%reg + %imm(immextrri)]", rd, rs, simm5+immext);
    e_st16.set_asm("est16 %reg, [%imm(immextrri) + %reg]", rd, simm5+immext, rs);
    e_st16.set_decoder(opext=0x0b, op=0xc);

    ldd16.set_asm("ldd16 [%reg + \%lo(%exp(lowrri))], %reg", rs, simm5, rd);
    ldd16.set_asm("ldd16 [%reg + %imm], %reg", rs, simm5, rd);
    ldd16.set_asm("ldd16 [%imm + %reg], %reg", simm5, rs, rd);
    ldd16.set_decoder(op=0x1b);
    e_ldd16.set_asm("eldd16 [%reg + \%lo(%exp(lowextrri))], %reg", rs, simm5+immext, rd);
    e_ldd16.set_asm("eldd16 [%reg + %imm(immextrri)], %reg", rs, simm5+immext, rd);
    e_ldd16.set_asm("eldd16 [%imm(immextrri) + %reg], %reg", simm5+immext, rs, rd);
    e_ldd16.set_decoder(opext=0x0b, op=0x1b);

    std16.set_asm("std16 %reg, [%reg + \%lo(%exp(lowrri))]", rd, rs, simm5);
    std16.set_asm("std16 %reg, [%reg + %imm]", rd, rs, simm5);
    std16.set_asm("std16 %reg, [%imm + %reg]", rd, simm5, rs);
    std16.set_decoder(op=0xf);
    e_std16.set_asm("estd16 %reg, [%reg + \%lo(%exp(lowextrri))]", rd, rs, simm5+immext);
    e_std16.set_asm("estd16 %reg, [%reg + %imm(immextrri)]", rd, rs, simm5+immext);
    e_std16.set_asm("estd16 %reg, [%imm(immextrri) + %reg]", rd, simm5+immext, rs);
    e_std16.set_decoder(opext=0x0b, op=0xf);

    sll16.set_asm("sll16 %reg, %imm, %reg", rs, simm5, rd);
    sll16.set_asm("sll16 %reg, \%lo(%exp(lowrri)), %reg", rs, simm5, rd);
    sll16.set_decoder(op=0x5);
    e_sll16.set_asm("esll16 %reg, %imm(immextrri), %reg", rs, simm5+immext, rd);
    e_sll16.set_asm("esll16 %reg, \%lo(%exp(lowextrri)), %reg", rs, simm5+immext, rd);
    e_sll16.set_decoder(opext=0x0b, op=0x5);

    srl16.set_asm("srl16 %reg, %imm, %reg", rs, simm5, rd);
    srl16.set_asm("srl16 %reg, \%lo(%exp(lowrri)), %reg", rs, simm5, rd);
    srl16.set_decoder(op=0x6);
    e_srl16.set_asm("esrl16 %reg, %imm(immextrri), %reg", rs, simm5+immext, rd);
    e_srl16.set_asm("esrl16 %reg, \%lo(%exp(lowextrri)), %reg", rs, simm5+immext, rd);
    e_srl16.set_decoder(opext=0x0b, op=0x6);

    sra16.set_asm("sra16 %reg, %imm, %reg", rs, simm5, rd);
    sra16.set_asm("sra16 %reg, \%lo(%exp(lowrri)), %reg", rs, simm5, rd);
    sra16.set_decoder(op=0x7);
    e_sra16.set_asm("esra16 %reg, %imm(immextrri), %reg", rs, simm5+immext, rd);
    e_sra16.set_asm("esra16 %reg, \%lo(%exp(lowextrri)), %reg", rs, simm5+immext, rd);
    e_sra16.set_decoder(opext=0x0b, op=0x7);

    /// Format I2 and EXT_I2
    mov8to3216.set_asm("movra %reg, %reg", reg8, reg32);
    mov8to3216.set_decoder(op=0x1e, op2=0x0, t=1);

    mov32to816.set_asm("movrb %reg, %reg", reg32, reg8);
    mov32to816.set_decoder(op=0x1e, op2=0x0, t=0);

    savesp16.set_asm("savesp %imm", simm9);
    savesp16.set_decoder(op=0x1c, op3=0x1);
    e_savesp16.set_asm("esavesp %imm(immextii)", simm9+immext);
    e_savesp16.set_decoder(opext=0x0b, op=0x1c, op3=0x1);

    sparc16bx.set_asm("sparc16bx %exp(pcreli)", simm9);
    sparc16bx.set_decoder(op=0x1e, op3=0x1);
    e_sparc16bx.set_asm("esparc16bx %exp(pcreli)", simm9+immext);
    e_sparc16bx.set_decoder(opext=0x0b, op=0x1e, op3=0x1);

    bn16.set_asm("bn16%[anul] %exp(pcreli)", an, simm8);
    bn16.set_decoder(op=0x1c, cond=0x0);
    e_bn16.set_asm("ebn16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bn16.set_decoder(opext=0x0b, op=0x1c, cond=0x0);

    bg16.set_asm("bg16%[anul] %exp(pcreli)", an, simm8);
    bg16.set_decoder(op=0x1e, cond=0x2);
    e_bg16.set_asm("ebg16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bg16.set_decoder(opext=0x0b, op=0x1e, cond=0x2);

    ble16.set_asm("ble16%[anul] %exp(pcreli)", an, simm8);
    ble16.set_decoder(op=0x1c, cond=0x2);
    e_ble16.set_asm("eble16%[anul] %exp(pcreli)", an, simm8+immext);
    e_ble16.set_decoder(opext=0x0b, op=0x1c, cond=0x2);

    bge16.set_asm("bge16%[anul] %exp(pcreli)", an, simm8);
    bge16.set_decoder(op=0x1e, cond=0x3);
    e_bge16.set_asm("ebge16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bge16.set_decoder(opext=0x0b, op=0x1e, cond=0x3);

    bl16.set_asm("bl16%[anul] %exp(pcreli)", an, simm8);
    bl16.set_decoder(op=0x1c, cond=0x3);
    e_bl16.set_asm("ebl16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bl16.set_decoder(opext=0x0b, op=0x1c, cond=0x3);

    bgu16.set_asm("bgu16%[anul] %exp(pcreli)", an, simm8);
    bgu16.set_decoder(op=0x1f, cond=0x0);
    e_bgu16.set_asm("ebgu16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bgu16.set_decoder(opext=0x0b, op=0x1f, cond=0x0);

    bleu16.set_asm("bleu16%[anul] %exp(pcreli)", an, simm8);
    bleu16.set_decoder(op=0x1d, cond=0x0);
    e_bleu16.set_asm("ebleu16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bleu16.set_decoder(opext=0x0b, op=0x1d, cond=0x0);

    bcc16.set_asm("bcc16%[anul] %exp(pcreli)", an, simm8);
    bcc16.set_decoder(op=0x1f, cond=0x1);
    e_bcc16.set_asm("ebcc16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bcc16.set_decoder(opext=0x0b, op=0x1f, cond=0x1);

    bcs16.set_asm("bcs16%[anul] %exp(pcreli)", an, simm8);
    bcs16.set_decoder(op=0x1d, cond=0x1);
    e_bcs16.set_asm("ebcs16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bcs16.set_decoder(opext=0x0b, op=0x1d, cond=0x1);

    bpos16.set_asm("bpos16%[anul] %exp(pcreli)", an, simm8);
    bpos16.set_decoder(op=0x1f, cond=0x2);
    e_bpos16.set_asm("ebpos16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bpos16.set_decoder(opext=0x0b, op=0x1f, cond=0x2);

    bneg16.set_asm("bneg16%[anul] %exp(pcreli)", an, simm8);
    bneg16.set_decoder(op=0x1d, cond=0x2);
    e_bneg16.set_asm("ebneg16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bneg16.set_decoder(opext=0x0b, op=0x1d, cond=0x2);

    bvc16.set_asm("bvc16%[anul] %exp(pcreli)", an, simm8);
    bvc16.set_decoder(op=0x1f, cond=0x3);
    e_bvc16.set_asm("ebvc16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bvc16.set_decoder(opext=0x0b, op=0x1f, cond=0x3);

    bvs16.set_asm("bvs16%[anul] %exp(pcreli)", an, simm8);
    bvs16.set_decoder(op=0x1d, cond=0x3);
    e_bvs16.set_asm("ebvs16%[anul] %exp(pcreli)", an, simm8+immext);
    e_bvs16.set_decoder(opext=0x0b, op=0x1d, cond=0x3);

    /// Format RI2 and EXT_RI2
    addfp.set_asm("addfp %imm, %reg", simm6, rd);
    addfp.set_decoder(op=0x13, op2=0);
    e_addfp.set_asm("eaddfp %imm(immextriri), %reg", simm6+immext, rd);
    e_addfp.set_decoder(opext=0x0b ,op=0x13, op2=0x0);

    ldfp.set_asm("ldfp [\%lo(%exp(lowriri))], %reg", simm6, rd);
    ldfp.set_asm("ldfp [%imm], %reg", simm6, rd);
    ldfp.set_decoder(op=0x13, op2=0x2);
    e_ldfp.set_asm("eldfp [\%lo(%exp(lowextriri))], %reg", simm6+immext, rd);
    e_ldfp.set_asm("eldfp [%imm(immextriri)], %reg", simm6+immext, rd);
    e_ldfp.set_decoder(opext=0x0b, op=0x13, op2=0x2);

    stfp.set_asm("stfp %reg, [\%lo(%exp(lowriri))]", rd, simm6);
    stfp.set_asm("stfp %reg, [%imm]", rd, simm6);
    stfp.set_decoder(op=0x13, op2=0x1);
    e_stfp.set_asm("estfp %reg, [\%lo(%exp(lowextriri))]", rd, simm6+immext);
    e_stfp.set_asm("estfp %reg, [%imm(immextriri)]", rd, simm6+immext);
    e_stfp.set_decoder(opext=0x0b, op=0x13, op2=0x1);

    addsp.set_asm("addsp %imm, %reg", simm6, rd);
    addsp.set_decoder(op=0x13, op2=3);
    e_addsp.set_asm("eaddsp %imm(immextriri), %reg", simm6+immext, rd);
    e_addsp.set_decoder(opext=0x0b, op=0x13, op2=0x3);

    ldsp.set_asm("ldsp [\%lo(%exp(lowriri))], %reg", simm6, rd);
    ldsp.set_asm("ldsp [%imm], %reg", simm6, rd);
    ldsp.set_decoder(op=0x14, op2=0x1);
    e_ldsp.set_asm("eldsp [\%lo(%exp(lowextriri))], %reg", simm6+immext, rd);
    e_ldsp.set_asm("eldsp [%imm(immextriri)], %reg", simm6+immext, rd);
    e_ldsp.set_decoder(opext=0x0b, op=0x14, op2=0x1);

    stsp.set_asm("stsp %reg, [\%lo(%exp(lowriri))]", rd, simm6);
    stsp.set_asm("stsp %reg, [%imm]", rd, simm6);
    stsp.set_decoder(op=0x14, op2=0);
    e_stsp.set_asm("estsp %reg, [\%lo(%exp(lowextriri))]", rd, simm6+immext);
    e_stsp.set_asm("estsp %reg, [%imm(immextriri)]", rd, simm6+immext);
    e_stsp.set_decoder(opext=0x0b, op=0x14, op2=0);

    btst16.set_asm("btst16 %imm, %reg", simm6, rd);
    btst16.set_decoder(op=0x14, op2=0x2);
    e_btst16.set_asm("ebtst16 %imm(immextriri), %reg", simm6+immext, rd);
    e_btst16.set_decoder(opext=0x0b, op=0x14, op2=0x2);

    clrw_imm16.set_asm("clrw [%reg + %imm]", rd, simm6);
    clrw_imm16.set_asm("clrw [%imm + %reg]", simm6, rd);
    clrw_imm16.set_decoder(op=0x14, op2=0x3);
    e_clrw_imm16.set_asm("eclrw [%reg + %imm(immextriri)]", rd, simm6+immext);
    e_clrw_imm16.set_asm("eclrw [%imm(immextriri) + %reg]", simm6+immext, rd);
    e_clrw_imm16.set_decoder(opext=0x0b, op=0x14, op2=0x3);

    /// Format RRI2 and RRI2_EXT
    addx16.set_asm("addx16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    addx16.set_asm("addx16 %reg, %imm, %reg", rs, simm2, rd);
    addx16.set_decoder(op=0x19, op2=0x0);
    e_addx16.set_asm("eaddx16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_addx16.set_asm("eaddx16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_addx16.set_decoder(opext=0x0b, op=0x19, op2=0x0);
    
    subx16.set_asm("subx16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    subx16.set_asm("subx16 %reg, %imm, %reg", rd, simm2, rs);
    subx16.set_decoder(op=0x19, op2=0x01);
    e_subx16.set_asm("esubx16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_subx16.set_asm("esubx16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_subx16.set_decoder(opext=0x0b, op=0x19, op2=0x01);

    stb16.set_asm("stb16 %reg, [%reg + \%lo(%exp(lowrrirri))]", rd, rs, simm2);
    stb16.set_asm("stb16 %reg, [%reg + %imm]", rd, rs, simm2);
    stb16.set_asm("stb16 %reg, [%imm + %reg]", rd, simm2, rs);
    stb16.set_decoder(op=0x19, op2=0x2);
    e_stb16.set_asm("estb16 %reg, [%reg + \%lo(%exp(lowextrrirri))]", rd, rs, simm2+immext);
    e_stb16.set_asm("estb16 %reg, [%reg + %imm(immextrrirri)]", rd, rs, simm2+immext);
    e_stb16.set_asm("estb16 %reg, [%imm(immextrrirri) + %reg]", rd, simm2+immext, rs);
    e_stb16.set_decoder(opext=0x0b, op=0x19, op2=0x2);

    sth16.set_asm("sth16 %reg, [%reg + \%lo(%exp(lowrrirri))]", rd, rs, simm2);
    sth16.set_asm("sth16 %reg, [%reg + %imm]", rd, rs, simm2);
    sth16.set_asm("sth16 %reg, [%imm + %reg]", rd, simm2, rs);
    sth16.set_decoder(op=0x19, op2=0x3);
    e_sth16.set_asm("esth16 %reg, [%reg + \%lo(%exp(lowextrrirri))]", rd, rs, simm2+immext);
    e_sth16.set_asm("esth16 %reg, [%reg + %imm(immextrrirri)]", rd, rs, simm2+immext);
    e_sth16.set_asm("esth16 %reg, [%imm(immextrrirri) + %reg]", rd, simm2+immext, rs);
    e_sth16.set_decoder(opext=0x0b, op=0x19, op2=0x3);

    ldsb16.set_asm("ldsb16 [%reg + \%lo(%exp(lowrrirri))], %reg", rs, simm2, rd);
    ldsb16.set_asm("ldsb16 [%reg + %imm], %reg", rs, simm2, rd);
    ldsb16.set_asm("ldsb16 [%imm + %reg], %reg", simm2, rs, rd);
    ldsb16.set_decoder(op=0x19, op2=0x4);
    e_ldsb16.set_asm("eldsb16 [%reg + \%lo(%exp(lowextrrirri))], %reg", rs, simm2+immext, rd);
    e_ldsb16.set_asm("eldsb16 [%reg + %imm(immextrrirri)], %reg", rs, simm2+immext, rd);
    e_ldsb16.set_asm("eldsb16 [%imm(immextrrirri) + %reg], %reg", simm2+immext, rs, rd);
    e_ldsb16.set_decoder(opext=0x0b, op=0x19, op2=0x4);

    ldsh16.set_asm("ldsh16 [%reg + \%lo(%exp(lowrrirri))], %reg", rs, simm2, rd);
    ldsh16.set_asm("ldsh16 [%reg + %imm], %reg", rs, simm2, rd);
    ldsh16.set_asm("ldsh16 [%imm + %reg], %reg", simm2, rs, rd);
    ldsh16.set_decoder(op=0x19, op2=0x5);
    e_ldsh16.set_asm("eldsh16 [%reg + \%lo(%exp(lowextrrirri))], %reg", rs, simm2+immext, rd);
    e_ldsh16.set_asm("eldsh16 [%reg + %imm(immextrrirri)], %reg", rs, simm2+immext, rd);
    e_ldsh16.set_asm("eldsh16 [%imm(immextrrirri) + %reg], %reg", simm2+immext, rs, rd);
    e_ldsh16.set_decoder(opext=0x0b, op=0x19, op2=0x5);

    ldub16.set_asm("ldub16 [%reg + \%lo(%exp(lowrrirri))], %reg", rs, simm2, rd);
    ldub16.set_asm("ldub16 [%reg + %imm], %reg", rs, simm2, rd);
    ldub16.set_asm("ldub16 [%imm + %reg], %reg", simm2, rs, rd);
    ldub16.set_decoder(op=0x19, op2=0x6);
    e_ldub16.set_asm("eldub16 [%reg + \%lo(%exp(lowextrrirri))], %reg", rs, simm2+immext, rd);
    e_ldub16.set_asm("eldub16 [%reg + %imm(immextrrirri)], %reg", rs, simm2+immext, rd);
    e_ldub16.set_asm("eldub16 [%imm(immextrrirri) + %reg], %reg", simm2+immext, rs, rd);
    e_ldub16.set_decoder(opext=0x0b, op=0x19, op2=0x6);

    lduh16.set_asm("lduh16 [%reg + \%lo(%exp(lowrrirri))], %reg", rs, simm2, rd);
    lduh16.set_asm("lduh16 [%reg + %imm], %reg", rs, simm2, rd);
    lduh16.set_asm("lduh16 [%imm + %reg], %reg", simm2, rs, rd);
    lduh16.set_decoder(op=0x19, op2=0x7);
    e_lduh16.set_asm("elduh16 [%reg + \%lo(%exp(lowextrrirri))], %reg", rs, simm2+immext, rd);
    e_lduh16.set_asm("elduh16 [%reg + %imm(immextrrirri)], %reg", rs, simm2+immext, rd);
    e_lduh16.set_asm("elduh16 [%imm(immextrrirri) + %reg], %reg", simm2+immext, rs, rd);
    e_lduh16.set_decoder(opext=0x0b, op=0x19, op2=0x7);

    smul16.set_asm("smul16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    smul16.set_asm("smul16 %reg, %imm, %reg", rd, simm2, rs);
    smul16.set_decoder(op=0x1A, op2=0x0);
    e_smul16.set_asm("esmul16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_smul16.set_asm("esmul16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_smul16.set_decoder(opext=0x0b, op=0x1A, op2=0x0);

    sdiv16.set_asm("sdiv16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    sdiv16.set_asm("sdiv16 %reg, %imm, %reg", rd, simm2, rs);
    sdiv16.set_decoder(op=0x1A, op2=0x01);
    e_sdiv16.set_asm("esdiv16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_sdiv16.set_asm("esdiv16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_sdiv16.set_decoder(opext=0x0b, op=0x1A, op2=0x01);

    umul16.set_asm("umul16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    umul16.set_asm("umul16 %reg, %imm, %reg", rd, simm2, rs);
    umul16.set_decoder(op=0x1A, op2=0x02);
    e_umul16.set_asm("eumul16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_umul16.set_asm("eumul16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_umul16.set_decoder(opext=0x0b, op=0x1A, op2=0x02);

    udiv16.set_asm("udiv16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    udiv16.set_asm("udiv16 %reg, %imm, %reg", rd, simm2, rs);
    udiv16.set_decoder(op=0x1A, op2=0x03);
    e_udiv16.set_asm("eudiv16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_udiv16.set_asm("eudiv16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_udiv16.set_decoder(opext=0x0b, op=0x1A, op2=0x03);

    or16.set_asm("or16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    or16.set_asm("or16 %reg, %imm, %reg", rd, simm2, rs);
    or16.set_decoder(op=0x1A, op2=0x04);
    e_or16.set_asm("eor16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_or16.set_asm("eor16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_or16.set_decoder(opext=0x0b, op=0x1A, op2=0x04);

    xor16.set_asm("xor16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    xor16.set_asm("xor16 %reg, %imm, %reg", rd, simm2, rs);
    xor16.set_decoder(op=0x1A, op2=0x05);
    e_xor16.set_asm("exor16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_xor16.set_asm("exor16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_xor16.set_decoder(opext=0x0b, op=0x1A, op2=0x05);

    orn16.set_asm("orn16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    orn16.set_asm("orn16 %reg, %imm, %reg", rd, simm2, rs);
    orn16.set_decoder(op=0x1A, op2=0x06);
    e_orn16.set_asm("eorn16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_orn16.set_asm("eorn16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_orn16.set_decoder(opext=0x0b, op=0x1A, op2=0x06);

    xnor16.set_asm("xnor16 %reg, \%lo(%exp(lowrrirri)), %reg", rs, simm2, rd);
    xnor16.set_asm("xnor16 %reg, %imm, %reg", rd, simm2, rs);
    xnor16.set_decoder(op=0x1A, op2=0x07);
    e_xnor16.set_asm("exnor16 %reg, \%lo(%exp(lowextrrirri)), %reg", rs, simm2+immext, rd);
    e_xnor16.set_asm("exnor16 %reg, %imm(immextrrirri), %reg", rs, simm2+immext, rd);
    e_xnor16.set_decoder(opext=0x0b, op=0x1A, op2=0x07);

    /// Format RR and RR_EXT
    addx_reg16.set_asm("addx16 %reg, %reg", rs, rd);
    addx_reg16.set_decoder(op=0xa, op2=0x4);
    e_addx_reg16.set_asm("eaddx16 %reg, %reg, %reg", rs, rsext, rd);
    e_addx_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x4);

    subx_reg16.set_asm("subx16 %reg, %reg", rs, rd);
    subx_reg16.set_decoder(op=0xa, op2=0xC);
    e_subx_reg16.set_asm("esubx16 %reg, %reg, %reg", rs, rsext, rd);
    e_subx_reg16.set_decoder(opext=0x0b, op=0xa, op2=0xC);

    btst_reg16.set_asm("btst16 %reg, %reg", rs, rd);
    btst_reg16.set_decoder(op=0xa, op2=0x18);
    //e_btst_reg16.set_asm("ebtst16 %reg, %reg, %reg", rs, rsext, rd);
    //e_btst_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x18);

    clrw16.set_asm("clrw [%reg + %reg]", rs, rd);
    clrw16.set_decoder(op=0xa, op2=0x1a);
    //e_clrw16.set_asm("eclrw [%reg + %reg + %reg]", rs, rsext, rd);
    //e_clrw16.set_decoder(opext=0x0b, op=0xa, op2=0x1a);

    clrb16.set_asm("clrb16 [%reg + %reg]", rs, rd);
    clrb16.set_decoder(op=0xa, op2=0x1f);
    //e_clrb16.set_asm("eclrb16 [%reg + %reg + %reg]", rs, rsext, rd);
    //e_clrb16.set_decoder(opext=0x0b, op=0xa, op2=0x1f);

    clrh16.set_asm("clrh16 [%reg + %reg]", rs, rd);
    clrh16.set_decoder(op=0xa, op2=0x1e);
    //e_clrh16.set_asm("eclrh16 [%reg + %reg + %reg]", rs, rsext, rd);
    //e_clrh16.set_decoder(opext=0x0b, op=0xa, op2=0x1e);

    cmp_reg16.set_asm("cmp16 %reg, %reg", rs, rd);
    cmp_reg16.set_decoder(op=0xa, op2=0x14);
    //e_cmp_reg16.set_asm("ecmp16 %reg, %reg, %reg", rs, rsext, rd);
    //e_cmp_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x14);

    stb_reg16.set_asm("stb16 %reg, [%reg]", rd, rs);
    stb_reg16.set_decoder(op=0xa, op2=0x5);
    e_stb_reg16.set_asm("estb16 %reg, [%reg + %reg]", rd, rsext, rs);
    e_stb_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x5);

    sth_reg16.set_asm("sth16 %reg, [%reg]", rd, rs);
    sth_reg16.set_decoder(op=0xa, op2=0x6);
    e_sth_reg16.set_asm("esth16 %reg, [%reg + %reg]", rd, rsext, rs);
    e_sth_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x6);

    std_reg16.set_asm("std16 %reg, [%reg]", rd, rs);
    std_reg16.set_decoder(op=0xa, op2=0x7);
    e_std_reg16.set_asm("estd16 %reg, [%reg + %reg]", rd, rsext, rs);
    e_std_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x7);

    lduh_reg16.set_asm("lduh16 [%reg], %reg", rs, rd);
    lduh_reg16.set_decoder(op=0xa, op2=0x2);
    e_lduh_reg16.set_asm("elduh16 [%reg + %reg], %reg", rsext, rs, rd);
    e_lduh_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x2);

    ldub_reg16.set_asm("ldub16 [%reg], %reg", rs, rd);
    ldub_reg16.set_decoder(op=0xa, op2=0x1);
    e_ldub_reg16.set_asm("eldub16 [%reg + %reg], %reg", rsext, rs, rd);
    e_ldub_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x1);

    ldd_reg16.set_asm("ldd16 [%reg], %reg", rs, rd);
    ldd_reg16.set_decoder(op=0xa, op2=0x3);
    e_ldd_reg16.set_asm("eldd16 [%reg + %reg], %reg", rsext, rs, rd);
    e_ldd_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x3);

    ldsb_reg16.set_asm("ldsb16 [%reg], %reg", rs, rd);
    ldsb_reg16.set_decoder(op=0xa, op2=0x9);
    e_ldsb_reg16.set_asm("eldsb16 [%reg + %reg], %reg", rsext, rs, rd);
    e_ldsb_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x9);

    ldsh_reg16.set_asm("ldsh16 [%reg], %reg", rs, rd);
    ldsh_reg16.set_decoder(op=0xa, op2=0xA);
    e_ldsh_reg16.set_asm("eldsh16 [%reg + %reg], %reg", rsext, rs, rd);
    e_ldsh_reg16.set_decoder(opext=0x0b, op=0xa, op2=0xA);

    sra_reg16.set_asm("sra16 %reg, %reg", rs, rd);
    sra_reg16.set_decoder(op=0xa, op2=0x17);
    e_sra_reg16.set_asm("esra16 %reg, %reg, %reg", rs, rsext, rd);
    e_sra_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x17);

    srl_reg16.set_asm("srl16 %reg, %reg", rs, rd);
    srl_reg16.set_decoder(op=0xa, op2=0x16);
    e_srl_reg16.set_asm("esrl16 %reg, %reg, %reg", rs, rsext, rd);
    e_srl_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x16);

    sll_reg16.set_asm("sll16 %reg, %reg", rs, rd);
    sll_reg16.set_decoder(op=0xa, op2=0x15);
    e_sll_reg16.set_asm("esll16 %reg, %reg, %reg", rs, rsext, rd);
    e_sll_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x15);

    orn_reg16.set_asm("orn16 %reg, %reg", rs, rd);
    orn_reg16.set_decoder(op=0xa, op2=0x1c);
    e_orn_reg16.set_asm("eorn16 %reg, %reg, %reg", rs, rsext, rd);
    e_orn_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x1c);

    xnor_reg16.set_asm("xnor16 %reg, %reg", rs, rd);
    xnor_reg16.set_decoder(op=0xa, op2=0x1b);
    e_xnor_reg16.set_asm("exnor16 %reg, %reg, %reg", rs, rsext, rd);
    e_xnor_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x1b);

    andn_reg16.set_asm("andn16 %reg, %reg", rs, rd);
    andn_reg16.set_decoder(op=0xa, op2=0xD);
    e_andn_reg16.set_asm("eandn16 %reg, %reg, %reg", rs, rsext, rd);
    e_andn_reg16.set_decoder(opext=0x0b, op=0xa, op2=0xD);

    neg_reg16.set_asm("neg16 %reg, %reg", rs, rd);
    neg_reg16.set_decoder(op=0xa, op2=0x1D);
    e_neg_reg16.set_asm("eneg16 %reg, %reg, %reg", rs, rsext, rd);
    e_neg_reg16.set_decoder(opext=0x0b, op=0xa, op2=0x1D);

    restore16.set_asm("restore16 %reg, %reg", rs, rd);
    restore16.set_decoder(op=0xa, op2=0x0);
    e_restore16.set_asm("erestore16 %reg, %reg, %reg", rs, rsext, rd);
    e_restore16.set_decoder(opext=0x0b, op=0xa, op2=0x0);

    rd16.set_asm("rd16 %prv_reg, %reg", rs, rd);
    rd16.set_decoder(op=0xa, op2=0xf);
    wr16.set_asm("wr16 %prv_reg, %reg", rs, rd);
    wr16.set_decoder(op=0xa, op2=0xe);

    callr.set_asm("callr %reg", rd);
    callr.set_decoder(op=0xa, op2=0x1f, rs=0x0);

    jmpr.set_asm("jmpr %reg", rd);
    jmpr.set_decoder(op=0xa, op2=0x1f, rs=0x1);

    ret.set_asm("ret");
    ret.set_decoder(op=0xa, op2=0x1f, rs=0x2);

    retl.set_asm("retl");
    retl.set_decoder(op=0xa, op2=0x1f, rs=0x3);

    trestore.set_asm("trestore");
    trestore.set_decoder(op=0xa, op2=0x1f, rs=0x4);

    nop.set_asm("nop");
    nop.set_decoder(op=0xa, op2=0x1f, rs=0x5);

    /// Format RRR
    add_reg16.set_asm("add16 %reg, %reg, %reg", rs1, rs2, rd);
    add_reg16.set_decoder(op=0x15, op2=0x0);

    sub_reg16.set_asm("sub16 %reg, %reg, %reg", rs1, rs2, rd);
    sub_reg16.set_decoder(op=0x15, op2=0x1);

    and_reg16.set_asm("and16 %reg, %reg, %reg", rs1, rs2, rd);
    and_reg16.set_decoder(op=0x15, op2=0x2);

    or_reg16.set_asm("or16 %reg, %reg, %reg", rs1, rs2, rd);
    or_reg16.set_decoder(op=0x15, op2=0x3);

    smul_reg16.set_asm("smul16 %reg, %reg, %reg", rs1, rs2, rd);
    smul_reg16.set_decoder(op=0x16, op2=0x0);

    sdiv_reg16.set_asm("sdiv16 %reg, %reg, %reg", rs1, rs2, rd);
    sdiv_reg16.set_decoder(op=0x16, op2=0x1);

    umul_reg16.set_asm("umul16 %reg, %reg, %reg", rs1, rs2, rd);
    umul_reg16.set_decoder(op=0x16, op2=0x2);

    udiv_reg16.set_asm("udiv16 %reg, %reg, %reg", rs1, rs2, rd);
    udiv_reg16.set_decoder(op=0x16, op2=0x3);

    st_reg16.set_asm("st16 %reg, [%reg + %reg]", rd, rs1, rs2);
    st_reg16.set_decoder(op=0x17, op2=0x0);

    ld_reg16.set_asm("ld16 [%reg + %reg], %reg", rs1, rs2, rd);
    ld_reg16.set_decoder(op=0x17, op2=0x1);

    xor_reg16.set_asm("xor16 %reg, %reg, %reg", rs1, rs2, rd);
    xor_reg16.set_decoder(op=0x17, op2=0x2);

    /// SPARCv8 Encoding and asm patterns
    /// ---
    ///
    //ldsb_reg.set_asm("ldsb [%reg + %reg], %reg", rs1, rs2, rd);
    //ldsb_reg.set_asm("ldsb [%reg], %reg", rs1, rd, rs2="%g0");
    //ldsb_reg.set_decoder(op=0x03, op3=0x09, is=0x00);
 
    //ldsh_reg.set_asm("ldsh [%reg + %reg], %reg", rs1, rs2, rd);
    //ldsh_reg.set_asm("ldsh [%reg], %reg", rs1, rd, rs2="%g0");
    //ldsh_reg.set_decoder(op=0x03, op3=0x0A, is=0x00);

    //ldub_reg.set_asm("ldub [%reg + %reg], %reg", rs1, rs2, rd);
    //ldub_reg.set_asm("ldub [%reg], %reg", rs1, rd, rs2="%g0");
    //ldub_reg.set_decoder(op=0x03, op3=0x01, is=0x00);

    //lduh_reg.set_asm("lduh [%reg + %reg], %reg", rs1, rs2, rd);
    //lduh_reg.set_asm("lduh [%reg], %reg", rs1, rd, rs2="%g0");
    //lduh_reg.set_decoder(op=0x03, op3=0x02, is=0x00);

    //ld_reg.set_asm("ld [%reg + %reg], %reg", rs1, rs2, rd);
    //ld_reg.set_asm("ld [%reg], %reg", rs1, rd, rs2="%g0");
    //ld_reg.set_decoder(op=0x03, op3=0x00, is=0x00);

    //ldd_reg.set_asm("ldd [%reg + %reg], %reg", rs1, rs2, rd);
    //ldd_reg.set_asm("ldd [%reg], %reg", rs1, rd, rs2="%g0");
    //ldd_reg.set_decoder(op=0x03, op3=0x03, is=0x00);

    //stb_reg.set_asm("stb %reg, [%reg + %reg]", rd, rs1, rs2);
    //stb_reg.set_asm("stb %reg, [%reg]", rd, rs1, rs2="%g0");	
    //stb_reg.set_asm("clrb [%reg + %reg]", rd="%g0", rs1, rs2);   // synthetic
    //stb_reg.set_asm("clrb [%reg]", rd="%g0", rs1, rs2="%g0");    // synthetic
    //stb_reg.set_decoder(op=0x03, op3=0x05, is=0x00);

    //sth_reg.set_asm("sth %reg, [%reg + %reg]", rd, rs1, rs2);
    //sth_reg.set_asm("sth %reg, [%reg]", rd, rs1, rs2="%g0");
    //sth_reg.set_asm("clrh [%reg + %reg]", rd="%g0", rs1, rs2);   // synthetic
    //sth_reg.set_asm("clrh [%reg]", rd="%g0", rs1, rs2="%g0");    // synthetic
    //sth_reg.set_decoder(op=0x03, op3=0x06, is=0x00);

    //st_reg.set_asm("st %reg, [%reg + %reg]", rd, rs1, rs2);
    //st_reg.set_asm("st %reg, [%reg]", rd, rs1, rs2="%g0");
    //st_reg.set_asm("clr [%reg + %reg]", rd="%g0", rs1, rs2);   // synthetic
    //st_reg.set_asm("clr [%reg]", rd="%g0", rs1, rs2="%g0");    // synthetic
    //st_reg.set_decoder(op=0x03, op3=0x04, is=0x00);

    //std_reg.set_asm("std %reg, [%reg + %reg]", rd, rs1, rs2);
    //std_reg.set_asm("std %reg, [%reg]", rd, rs1, rs2="%g0");
    //std_reg.set_decoder(op=0x03, op3=0x07, is=0x00);

    //ldstub_reg.set_asm("ldstub [%reg + %reg], %reg", rs1, rs2, rd);
    //ldstub_reg.set_asm("ldstub [%reg], %reg", rs1, rd, rs2="%g0");
    //ldstub_reg.set_decoder(op=0x03, op3=0x0D, is=0x00);

    //swap_reg.set_asm("swap [%reg + %reg], %reg", rs1, rs2, rd);
    //swap_reg.set_asm("swap [%reg], %reg", rs1, rd, rs2="%g0");
    //swap_reg.set_decoder(op=0x03, op3=0x0F, is=0x00);

    //ldsb_imm.set_asm("ldsb [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //ldsb_imm.set_asm("ldsb [%reg + %imm], %reg", rs1, simm13, rd);
    //ldsb_imm.set_asm("ldsb [%imm + %reg], %reg", simm13, rs1, rd);
    //ldsb_imm.set_asm("ldsb [%imm], %reg", simm13, rd, rs1="%g0");
    //ldsb_imm.set_decoder(op=0x03, op3=0x09, is = 0x01);

    //ldsh_imm.set_asm("ldsh [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //ldsh_imm.set_asm("ldsh [%reg + %imm], %reg", rs1, simm13, rd);
    //ldsh_imm.set_asm("ldsh [%imm + %reg], %reg", simm13, rs1, rd);
    //ldsh_imm.set_asm("ldsh [%imm], %reg", simm13, rd, rs1="%g0");
    //ldsh_imm.set_decoder(op=0x03, op3=0x0A, is = 0x01);

    //ldub_imm.set_asm("ldub [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //ldub_imm.set_asm("ldub [%reg + %imm], %reg", rs1, simm13, rd);
    //ldub_imm.set_asm("ldub [%imm + %reg], %reg", simm13, rs1, rd);
    //ldub_imm.set_asm("ldub [%imm], %reg", simm13, rd, rs1="%g0");
    //ldub_imm.set_decoder(op=0x03, op3=0x01, is = 0x01);

    //lduh_imm.set_asm("lduh [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //lduh_imm.set_asm("lduh [%reg + %imm], %reg", rs1, simm13, rd);
    //lduh_imm.set_asm("lduh [%imm + %reg], %reg", simm13, rs1, rd);
    //lduh_imm.set_asm("lduh [%imm], %reg", simm13, rd, rs1="%g0");
    //lduh_imm.set_decoder(op=0x03, op3=0x02, is = 0x01);

    //ld_imm.set_asm("ld [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //ld_imm.set_asm("ld [%reg + %imm], %reg", rs1, simm13, rd);
    //ld_imm.set_asm("ld [%imm + %reg], %reg", simm13, rs1, rd);
    //ld_imm.set_asm("ld [%imm], %reg", simm13, rd, rs1="%g0");
    //ld_imm.set_decoder(op=0x03, op3=0x00, is = 0x01);

    //ldd_imm.set_asm("ldd [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //ldd_imm.set_asm("ldd [%reg + %imm], %reg", rs1, simm13, rd);
    //ldd_imm.set_asm("ldd [%imm + %reg], %reg", simm13, rs1, rd);
    //ldd_imm.set_asm("ldd [%imm], %reg", simm13, rd, rs1="%g0");
    //ldd_imm.set_decoder(op=0x03, op3=0x03, is = 0x01);

    //stb_imm.set_asm("stb %reg, [%reg + \%lo(%exp(low))]", rd, rs1, simm13);
    //stb_imm.set_asm("stb %reg, [%reg + %imm]", rd, rs1, simm13);
    //stb_imm.set_asm("stb %reg, [%imm + %reg]", rd, simm13, rs1);
    //stb_imm.set_asm("stb %reg, [%imm]", rd, simm13, rs1="%g0");
    //stb_imm.set_asm("clrb [%reg + %imm]", rd="%g0", rs1, simm13);   // synthetic
    //stb_imm.set_asm("clrb [%imm + %reg]", rd="%g0", simm13, rs1);   // synthetic
    //stb_imm.set_asm("clrb [%imm]", rd="%g0", rs1="%g0", simm13);    // synthetic
    //stb_imm.set_decoder(op=0x03, op3=0x05, is = 0x01);

    //sth_imm.set_asm("sth %reg, [%reg + \%lo(%exp(low))]", rd, rs1, simm13);
    //sth_imm.set_asm("sth %reg, [%reg + %imm]", rd, rs1, simm13);
    //sth_imm.set_asm("sth %reg, [%imm + %reg]", rd, simm13, rs1);
    //sth_imm.set_asm("sth %reg, [%imm]", rd, simm13, rs1="%g0");
    //sth_imm.set_asm("clrh [%reg + %imm]", rd="%g0", rs1, simm13);   // synthetic
    //sth_imm.set_asm("clrh [%imm + %reg]", rd="%g0", simm13, rs1);   // synthetic
    //sth_imm.set_asm("clrh [%imm]", rd="%g0", rs1="%g0", simm13);    // synthetic
    //sth_imm.set_decoder(op=0x03, op3=0x06, is = 0x01);

    //st_imm.set_asm("st %reg, [%reg + \%lo(%exp(low))]", rd, rs1, simm13);
    //st_imm.set_asm("st %reg, [%reg + %imm]", rd, rs1, simm13);
    //st_imm.set_asm("st %reg, [%imm + %reg]", rd, simm13, rs1);
    //st_imm.set_asm("st %reg, [%imm]", rd, simm13, rs1="%g0");
    //st_imm.set_asm("clr [%reg + %imm]", rd="%g0", rs1, simm13);   // synthetic
    //st_imm.set_asm("clr [%imm + %reg]", rd="%g0", simm13, rs1);   // synthetic
    //st_imm.set_asm("clr [%imm]", rd="%g0", rs1="%g0", simm13);    // synthetic
    //st_imm.set_decoder(op=0x03, op3=0x04, is = 0x01);

    //std_imm.set_asm("std %reg, [%reg + \%lo(%exp(low))]", rd, rs1, simm13);
    //std_imm.set_asm("std %reg, [%reg + %imm]", rd, rs1, simm13);
    //std_imm.set_asm("std %reg, [%imm + %reg]", rd, simm13, rs1);
    //std_imm.set_asm("std %reg, [%imm]", rd, simm13, rs1="%g0");
    //std_imm.set_decoder(op=0x03, op3=0x07, is = 0x01);

    //ldstub_imm.set_asm("ldstub [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //ldstub_imm.set_asm("ldstub [%reg + %imm], %reg", rs1, simm13, rd);
    //ldstub_imm.set_asm("ldstub [%imm + %reg], %reg", simm13, rs1, rd);
    //ldstub_imm.set_asm("ldstub [%imm], %reg", simm13, rd, rs1="%g0");
    //ldstub_imm.set_decoder(op=0x03, op3=0x0D, is = 0x01);

    //swap_imm.set_asm("swap [%reg + \%lo(%exp(low))], %reg", rs1, simm13, rd);
    //swap_imm.set_asm("swap [%reg + %imm], %reg", rs1, simm13, rd);
    //swap_imm.set_asm("swap [%imm + %reg], %reg", simm13, rs1, rd);
    //swap_imm.set_asm("swap [%imm], %reg", simm13, rd, rs1="%g0");
    //swap_imm.set_decoder(op=0x03, op3=0x0F, is = 0x01);

    //nop.set_asm("nop");
    //nop.set_decoder(op=0x00, rd=0x00, op2=0x04, imm22=0x00);

    //sethi.set_asm("sethi %exp, %reg", imm22, rd);
    //sethi.set_asm("sethi \%hi(%exp(high)), %reg", imm22, rd);
    //sethi.set_decoder(op=0x00, op2=0x04);

    //and_reg.set_asm("and %reg, %reg, %reg", rs1, rs2, rd);
    //and_reg.set_decoder(op=0x02, op3=0x01, is=0x00);

    //and_imm.set_asm("and %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //and_imm.set_asm("and %reg, %imm, %reg", rs1, simm13, rd);
    //and_imm.set_decoder(op=0x02, op3=0x01, is=0x01);

    //andcc_reg.set_asm("andcc %reg, %reg, %reg", rs1, rs2, rd);
    //andcc_reg.set_asm("btst %reg, %reg", rs2, rs1, rd="%g0");
    //andcc_reg.set_decoder(op=0x02, op3=0x11, is=0x00);

    //andcc_imm.set_asm("andcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //andcc_imm.set_asm("andcc %reg, %imm, %reg", rs1, simm13, rd);
    //andcc_imm.set_asm("btst %imm, %reg", simm13, rs1, rd="%g0");
    //andcc_imm.set_decoder(op=0x02, op3=0x11, is=0x01);

    //andn_reg.set_asm("andn %reg, %reg, %reg", rs1, rs2, rd);
    //andn_reg.set_decoder(op=0x02, op3=0x05, is=0x00);

    //andn_imm.set_asm("andn %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //andn_imm.set_asm("andn %reg, %imm, %reg", rs1, simm13, rd);
    //andn_imm.set_decoder(op=0x02, op3=0x05, is=0x01);

    //andncc_reg.set_asm("andncc %reg, %reg, %reg", rs1, rs2, rd);
    //andncc_reg.set_decoder(op=0x02, op3=0x15, is=0x00);

    //andncc_imm.set_asm("andncc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //andncc_imm.set_asm("andncc %reg, %imm, %reg", rs1, simm13, rd);
    //andncc_imm.set_decoder(op=0x02, op3=0x15, is=0x01);

    //or_reg.set_asm("or %reg, %reg, %reg", rs1, rs2, rd);
    //or_reg.set_asm("clr %reg", rs1="%g0", rs2="%g0", rd);   // synthetic
    //or_reg.set_asm("mov %reg, %reg", rs1="%g0", rs2, rd);   // synthetic
    //or_reg.set_decoder(op=0x02, op3=0x02, is=0x00);

    //or_imm.set_asm("or %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //or_imm.set_asm("or %reg, %imm, %reg", rs1, simm13, rd);
    //or_imm.set_asm("mov %imm, %reg", rs1="%g0", simm13, rd);  // synthetic
    //or_imm.set_decoder(op=0x02, op3=0x02, is=0x01);

    //orcc_reg.set_asm("orcc %reg, %reg, %reg", rs1, rs2, rd);
    //orcc_reg.set_asm("tst %reg", rs1="%g0", rs2, rd="%g0");    // synthetic
    //orcc_reg.set_decoder(op=0x02, op3=0x12, is=0x00);

    //orcc_imm.set_asm("orcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);    
    //orcc_imm.set_asm("orcc %reg, %imm, %reg", rs1, simm13, rd);
    //orcc_imm.set_decoder(op=0x02, op3=0x12, is=0x01);

    //orn_reg.set_asm("orn %reg, %reg, %reg", rs1, rs2, rd);
    //orn_reg.set_decoder(op=0x02, op3=0x06, is=0x00);

    //orn_imm.set_asm("orn %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //orn_imm.set_asm("orn %reg, %imm, %reg", rs1, simm13, rd);
    //orn_imm.set_decoder(op=0x02, op3=0x06, is=0x01);

    //orncc_reg.set_asm("orncc %reg, %reg, %reg", rs1, rs2, rd);
    //orncc_reg.set_decoder(op=0x02, op3=0x16, is=0x00);

    //orncc_imm.set_asm("orncc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd); 
    //orncc_imm.set_asm("orncc %reg, %imm, %reg", rs1, simm13, rd);   
    //orncc_imm.set_decoder(op=0x02, op3=0x16, is=0x01);

    //xor_reg.set_asm("xor %reg, %reg, %reg", rs1, rs2, rd);
    //xor_reg.set_decoder(op=0x02, op3=0x03, is=0x00);

    //xor_imm.set_asm("xor %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //xor_imm.set_asm("xor %reg, %imm, %reg", rs1, simm13, rd);
    //xor_imm.set_decoder(op=0x02, op3=0x03, is=0x01);

    //xorcc_reg.set_asm("xorcc %reg, %reg, %reg", rs1, rs2, rd);
    //xorcc_reg.set_decoder(op=0x02, op3=0x13, is=0x00);

    //xorcc_imm.set_asm("xorcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);   
    //xorcc_imm.set_asm("xorcc %reg, %imm, %reg", rs1, simm13, rd);
    //xorcc_imm.set_decoder(op=0x02, op3=0x13, is=0x01);

    //xnor_reg.set_asm("xnor %reg, %reg, %reg", rs1, rs2, rd);
    //xnor_reg.set_asm("not %reg, %reg", rs1, rs2="%g0", rd);   // synthetic
    //xnor_reg.set_decoder(op=0x02, op3=0x07, is=0x00);

    //xnor_imm.set_asm("xnor %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);   
    //xnor_imm.set_asm("xnor %reg, %imm, %reg", rs1, simm13, rd);
    //xnor_imm.set_decoder(op=0x02, op3=0x07, is=0x01);

    //xnorcc_reg.set_asm("xnorcc %reg, %reg, %reg", rs1, rs2, rd);
    //xnorcc_reg.set_decoder(op=0x02, op3=0x17, is=0x00);

    //xnorcc_imm.set_asm("xnorcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //xnorcc_imm.set_asm("xnorcc %reg, %imm, %reg", rs1, simm13, rd);
    //xnorcc_imm.set_decoder(op=0x02, op3=0x17, is=0x01);

    //sll_reg.set_asm("sll %reg, %reg, %reg", rs1, rs2, rd);
    //sll_reg.set_decoder(op=0x02, op3=0x25, is=0x00);

    //sll_imm.set_asm("sll %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //sll_imm.set_asm("sll %reg, %imm, %reg", rs1, simm13, rd);
    //sll_imm.set_decoder(op=0x02, op3=0x25, is=0x01);

    //srl_reg.set_asm("srl %reg, %reg, %reg", rs1, rs2, rd);
    //srl_reg.set_decoder(op=0x02, op3=0x26, is=0x00);

    //srl_imm.set_asm("srl %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //srl_imm.set_asm("srl %reg, %imm, %reg", rs1, simm13, rd);  
    //srl_imm.set_decoder(op=0x02, op3=0x26, is=0x01);

    //sra_reg.set_asm("sra %reg, %reg, %reg", rs1, rs2, rd);
    //sra_reg.set_decoder(op=0x02, op3=0x27, is=0x00);

    //sra_imm.set_asm("sra %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //sra_imm.set_asm("sra %reg, %imm, %reg", rs1, simm13, rd);
    //sra_imm.set_decoder(op=0x02, op3=0x27, is=0x01);

    //add_reg.set_asm("add %reg, %reg, %reg", rs1, rs2, rd);
    //add_reg.set_decoder(op=0x02, op3=0x00, is=0x00);

    //add_imm.set_asm("add %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd); // gas
    //add_imm.set_asm("add %reg, %imm, %reg", rs1, simm13, rd);
    //add_imm.set_decoder(op=0x02, op3=0x00, is=0x01);

    //addcc_reg.set_asm("addcc %reg, %reg, %reg", rs1, rs2, rd);
    //addcc_reg.set_asm("btst %reg, %reg", rs1, rs2, rd="%g0");  // synthetic
    //addcc_reg.set_decoder(op=0x02, op3=0x10, is=0x00);

    //addcc_imm.set_asm("addcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd); 
    //addcc_imm.set_asm("addcc %reg, %imm, %reg", rs1, simm13, rd);
    //addcc_imm.set_asm("btst %reg, %imm", rs1, simm13, rd="%g0");  // synthetic
    //addcc_imm.set_decoder(op=0x02, op3=0x10, is=0x01);

    //addx_reg.set_asm("addx %reg, %reg, %reg", rs1, rs2, rd);
    //addx_reg.set_decoder(op=0x02, op3=0x08, is=0x00);

    //addx_imm.set_asm("addx %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //addx_imm.set_asm("addx %reg, %imm, %reg", rs1, simm13, rd);
    //addx_imm.set_decoder(op=0x02, op3=0x08, is=0x01);

    //addxcc_reg.set_asm("addxcc %reg, %reg, %reg", rs1, rs2, rd);
    //addxcc_reg.set_decoder(op=0x02, op3=0x18, is=0x00);

    //addxcc_imm.set_asm("addxcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //addxcc_imm.set_asm("addxcc %reg, %imm, %reg", rs1, simm13, rd);
    //addxcc_imm.set_decoder(op=0x02, op3=0x18, is=0x01);

    //sub_reg.set_asm("sub %reg, %reg, %reg", rs1, rs2, rd);
    //sub_reg.set_asm("neg %reg, %reg", rs1="%g0", rs2, rd);   // synthetic
    //sub_reg.set_decoder(op=0x02, op3=0x04, is=0x00);

    //sub_imm.set_asm("sub %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //sub_imm.set_asm("sub %reg, %imm, %reg", rs1, simm13, rd);
    //sub_imm.set_decoder(op=0x02, op3=0x04, is=0x01);

    //subcc_reg.set_asm("subcc %reg, %reg, %reg", rs1, rs2, rd);
    //subcc_reg.set_asm("cmp %reg, %reg", rs1, rs2, rd="%g0");	// synthetic
    //subcc_reg.set_decoder(op=0x02, op3=0x14, is=0x00);

    //subcc_imm.set_asm("subcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //subcc_imm.set_asm("subcc %reg, %imm, %reg", rs1, simm13, rd);
    //subcc_imm.set_asm("cmp %reg, %imm", rs1, simm13, rd="%g0");   // synthetic
    //subcc_imm.set_decoder(op=0x02, op3=0x14, is=0x01);

    //subx_reg.set_asm("subx %reg, %reg, %reg", rs1, rs2, rd);
    //subx_reg.set_decoder(op=0x02, op3=0x0C, is=0x00);

    //subx_imm.set_asm("subx %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //subx_imm.set_asm("subx %reg, %imm, %reg", rs1, simm13, rd);
    //subx_imm.set_decoder(op=0x02, op3=0x0C, is=0x01);

    //subxcc_reg.set_asm("subxcc %reg, %reg, %reg", rs1, rs2, rd);
    //subxcc_reg.set_decoder(op=0x02, op3=0x1C, is=0x00);

    //subxcc_imm.set_asm("subxcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //subxcc_imm.set_asm("subxcc %reg, %imm, %reg", rs1, simm13, rd);
    //subxcc_imm.set_decoder(op=0x02, op3=0x1C, is=0x01);

    //umulcc_imm.set_asm("umulcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //umulcc_imm.set_asm("umulcc %reg, %imm, %reg", rs1, simm13, rd);
    //umulcc_imm.set_decoder(op=0x02, op3=0x1A, is=0x01);

    //umul_imm.set_asm("umul %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //umul_imm.set_asm("umul %reg, %imm, %reg", rs1, simm13, rd);
    //umul_imm.set_decoder(op=0x02, op3=0x0A, is=0x01);

    //umulcc_reg.set_asm("umulcc %reg, %reg, %reg", rs1, rs2, rd);
    //umulcc_reg.set_decoder(op=0x02, op3=0x1A, is=0x00);

    //umul_reg.set_asm("umul %reg, %reg, %reg", rs1, rs2, rd);
    //umul_reg.set_decoder(op=0x02, op3=0x0A, is=0x00);

    //smul_imm.set_asm("smul %reg, %imm, %reg", rs1, simm13, rd);
    //smul_imm.set_decoder(op=0x02, op3=0x0B, is=0x01);

    //smulcc_imm.set_asm("smulcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //smulcc_imm.set_asm("smulcc %reg, %imm, %reg", rs1, simm13, rd);
    //smulcc_imm.set_decoder(op=0x02, op3=0x1B, is=0x01);

    //smul_reg.set_asm("smul %reg, %reg, %reg", rs1, rs2, rd);
    //smul_reg.set_decoder(op=0x02, op3=0x0B, is=0x00);

    //smulcc_reg.set_asm("smulcc %reg, %reg, %reg", rs1, rs2, rd);
    //smulcc_reg.set_decoder(op=0x02, op3=0x1B, is=0x00);

    //mulscc_reg.set_asm("mulscc %reg, %reg, %reg", rs1, rs2, rd);
    //mulscc_reg.set_decoder(op=0x02, op3=0x24, is=0x00);

    //mulscc_imm.set_asm("mulscc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //mulscc_imm.set_asm("mulscc %reg, %imm, %reg", rs1, simm13, rd);
    //mulscc_imm.set_decoder(op=0x02, op3=0x24, is=0x01);

    //udiv_reg.set_asm("udiv %reg, %reg, %reg", rs1, rs2, rd);
    //udiv_reg.set_decoder(op=0x02, op3=0x0E, is=0x00);

    //udivcc_reg.set_asm("smul %reg, %reg, %reg", rs1, rs2, rd);
    //udivcc_reg.set_decoder(op=0x02, op3=0x1E, is=0x00);

    //udiv_imm.set_asm("udiv %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //udiv_imm.set_asm("udiv %reg, %imm, %reg", rs1, simm13, rd);
    //udiv_imm.set_decoder(op=0x02, op3=0x0E, is=0x01);

    //udivcc_imm.set_asm("udivcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //udivcc_imm.set_asm("udivcc %reg, %imm, %reg", rs1, simm13, rd);
    //udivcc_imm.set_decoder(op=0x02, op3=0x1E, is=0x01);

    //sdiv_reg.set_asm("sdiv %reg, %reg, %reg", rs1, rs2, rd);
    //sdiv_reg.set_decoder(op=0x02, op3=0x0F, is=0x00);

    //sdivcc_reg.set_asm("sdivcc %reg, %reg, %reg", rs1, rs2, rd);
    //sdivcc_reg.set_decoder(op=0x02, op3=0x1F, is=0x00);

    //sdiv_imm.set_asm("sdiv %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //sdiv_imm.set_asm("sdiv %reg, %imm, %reg", rs1, simm13, rd);
    //sdiv_imm.set_decoder(op=0x02, op3=0x0F, is=0x01);

    //sdivcc_imm.set_asm("sdivcc %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //sdivcc_imm.set_asm("sdivcc %reg, %imm, %reg", rs1, simm13, rd);
    //sdivcc_imm.set_decoder(op=0x02, op3=0x1F, is=0x01);

    //save_reg.set_asm("save %reg, %reg, %reg", rs1, rs2, rd);
    //save_reg.set_asm("save", rs1="%g0", rs2="%g0", rd="%g0");	// synthetic
    //save_reg.set_decoder(op=0x02, op3=0x3C, is=0x00);

    //save_imm.set_asm("save %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //save_imm.set_asm("save %reg, %imm, %reg", rs1, simm13, rd);
    //save_imm.set_decoder(op=0x02, op3=0x3C, is=0x01);

    //restore_reg.set_asm("restore %reg, %reg, %reg", rs1, rs2, rd);
    //restore_reg.set_asm("restore", rs1="%g0", rs2="%g0", rd="%g0");   // synthetic
    //restore_reg.set_decoder(op=0x02, op3=0x3D, is=0x00);

    //restore_imm.set_asm("restore %reg, \%lo(%exp(low)), %reg", rs1, simm13, rd);
    //restore_imm.set_asm("restore %reg, %imm, %reg", rs1, simm13, rd);
    //restore_imm.set_decoder(op=0x02, op3=0x3D, is=0x01);

    //ba.set_asm("b  %exp(pcrel)", disp22, an=0);
    //ba.set_asm("ba %exp(pcrel)", disp22, an=0);
    //ba.set_asm("ba,a %exp(pcrel)", disp22, an=1);
    //ba.set_decoder(op=0x00, cond=0x08, op2=0x02);

    //bn.set_asm("bn %exp(pcrel)", disp22, an=0);
    //bn.set_asm("bn,a %exp(pcrel)", disp22, an=1);
    //bn.set_decoder(op=0x00, cond=0x00, op2=0x02);

    //bne.set_asm("bne%[anul] %exp(pcrel)", an, disp22);
    //bne.set_asm("bnz%[anul] %exp(pcrel)", an, disp22);
    //bne.set_decoder(op=0x00, cond=0x09, op2=0x02);

    //be.set_asm("be%[anul] %exp(pcrel)", an, disp22);
    //be.set_asm("bz%[anul] %exp(pcrel)", an, disp22);
    //be.set_decoder(op=0x00, cond=0x01, op2=0x02);

    //bg.set_asm("bg%[anul] %exp(pcrel)", an, disp22);
    //bg.set_decoder(op=0x00, cond=0x0A, op2=0x02);

    //ble.set_asm("ble%[anul] %exp(pcrel)", an, disp22);
    //ble.set_decoder(op=0x00, cond=0x02, op2=0x02);

    //bge.set_asm("bge%[anul] %exp(pcrel)", an, disp22);
    //bge.set_decoder(op=0x00, cond=0x0B, op2=0x02);

    //bl.set_asm("bl%[anul] %exp(pcrel)", an, disp22);
    //bl.set_decoder(op=0x00, cond=0x03, op2=0x02);

    //bgu.set_asm("bgu%[anul] %exp(pcrel)", an, disp22);
    //bgu.set_decoder(op=0x00, cond=0x0C, op2=0x02);

    //bleu.set_asm("bleu%[anul] %exp(pcrel)", an, disp22);
    //bleu.set_decoder(op=0x00, cond=0x04, op2=0x02);

    //bcc.set_asm("bcc%anul %exp(pcrel)", an, disp22);
    //bcc.set_asm("bgeu%[anul] %exp(pcrel)", an, disp22);
    //bcc.set_decoder(op=0x00, cond=0x0D, op2=0x02);

    //bcs.set_asm("bcs%[anul] %exp(pcrel)", an, disp22);
    //bcs.set_asm("blu%[anul] %exp(pcrel)", an, disp22);
    //bcs.set_decoder(op=0x00, cond=0x05, op2=0x02);

    //bpos.set_asm("bpos%[anul] %exp(pcrel)", an, disp22);
    //bpos.set_decoder(op=0x00, cond=0x0E, op2=0x02);

    //bneg.set_asm("bneg%[anul] %exp(pcrel)", an, disp22);
    //bneg.set_decoder(op=0x00, cond=0x06, op2=0x02);

    //bvc.set_asm("bvc%[anul] %exp(pcrel)", an, disp22);
    //bvc.set_decoder(op=0x00, cond=0x0F, op2=0x02);

    //bvs.set_asm("bvs%[anul] %exp(pcrel)", an, disp22);
    //bvs.set_decoder(op=0x00, cond=0x07, op2=0x02);

    //call.set_asm("call %exp(pcrel)", disp30);
    //call.set_decoder(op=0x01);

    //rdy.set_asm("rd \%y, %reg", rs1=0, rd);
    //rdy.set_asm("mov \%y, %reg", rs1=0, rd);
    //rdy.set_decoder(op=0x02, op3=0x28);

    //jmpl_reg.set_asm("jmp %reg", rs1, rs2=0, rd=0);   // gas
    //jmpl_reg.set_asm("call %reg", rs1, rs2=0, rd=15); // gas
    //jmpl_reg.set_asm("jmpl %reg + %reg, %reg", rs1, rs2, rd);
    //jmpl_reg.set_asm("jmp %reg + %reg", rs1, rs2, rd="%g0");     // synthetic
    //jmpl_reg.set_asm("call %reg + %reg", rs1, rs2, rd="%o7");    // synthetic
    //jmpl_reg.set_decoder(op=0x02, op3=0x38, is=0x00);

    //jmpl_imm.set_asm("jmpl %reg + %imm, %reg", rs1, simm13, rd);
    //jmpl_imm.set_asm("jmpl %imm + %reg, %reg", simm13, rs1, rd);
    //jmpl_imm.set_asm("jmp %reg + %imm", rs1, simm13, rd="%g0");    // synthetic
    //jmpl_imm.set_asm("call %reg + %imm", rs1, simm13, rd="%o7");   // synthetic
    //jmpl_imm.set_asm("ret", rs1="%i7", simm13=8, rd="%g0");	   // synthetic
    //jmpl_imm.set_asm("retl", rs1="%o7", simm13=8, rd="%g0");	   // synthetic    
    //jmpl_imm.set_decoder(op=0x02, op3=0x38, is=0x01);

    //wry_reg.set_asm("wr %reg, \%y", rs1, rd=0, rs2=0);
    //wry_reg.set_asm("wr %reg, %reg, \%y", rs1, rs2, rd=0);
    //wry_reg.set_asm("mov %reg, \%y", rs1="%g0", rs2, rd=0);
    //wry_reg.set_decoder(op=0x02, op3=0x30, is=0x00);

    //wry_imm.set_asm("wr %reg, %imm, \%y", rs1, simm13, rd=0);
    //wry_imm.set_asm("mov %imm, \%y", simm13, rs1="%g0", rd=0);
    //wry_imm.set_decoder(op=0x02, op3=0x30, is=0x01);

    //trap_imm.set_asm("t%cond %imm", cond, imm7, r1=0);
    //trap_imm.set_decoder(op=0x02, is=1, op2a=0x3A);

    //trap_reg.set_asm("t%cond %reg", cond, rs2);
    //trap_reg.set_decoder(op=0x02, is=0, op2a=0x3A);

    //unimplemented.set_asm("unimp %imm", imm22);
    //unimplemented.set_decoder(op=0x00,rd=0x00,op2=0x00);

    //pseudo_instr("not %reg") {
    //  "xnor %0, \%g0, %0";      
    //}
 
    //pseudo_instr("neg %reg") {
    //  "sub \%g0, %0, %0";
    //}

    //pseudo_instr("inc %reg") {
    //  "add %0, 1, %0";
    //}

    //pseudo_instr("inc %imm, %reg") {
    //  "add %1, %0, %1";
    //}

    //pseudo_instr("inccc %reg") {
    //  "addcc %0, 1, %0";
    //}

    //pseudo_instr("inccc %imm, %reg") {
    //  "addcc %1, %0, %1";
    //}

    //pseudo_instr("dec %reg") {
    //  "sub %0, 1, %0";
    //}

    //pseudo_instr("dec %imm, %reg") {
    //  "sub %1, %0, %1";
    //}

    //pseudo_instr("deccc %reg") {
    //  "subcc %0, 1, %0";
    //}

    //pseudo_instr("deccc %imm, %reg") {
    //  "subcc %0, %1, %0";
    //}

    //pseudo_instr("set %addr, %reg") { 
    //  "sethi \%hi(%0), %1";
    //  "or    %1, \%lo(%0), %1";
    //}

    //pseudo_instr("set %imm, %reg") { // only valid when -4096 <= imm <= 4095
    //  "or    \%g0, %0, %1";
    //}

    //pseudo_instr("bset %reg, %reg") {
    //  "or %1, %0, %1";
    //}

    //pseudo_instr("bset %imm, %reg") {
    //  "or %1, %0, %1";
    //}

    //pseudo_instr("bclr %reg, %reg") {
    //  "andn %1, %0, %1";
    //}

    //pseudo_instr("bclr %imm, %reg") {
    //  "andn %1, %0, %1";
    //}

    //pseudo_instr("btog %reg, %reg") {
    //  "xor %1, %0, %1";
    //}

    //pseudo_instr("btog %imm, %reg") {
    //  "xor %1, %0, %1";
    //}

    //pseudo_instr("call %exp, %imm") {
    //  "call %0";
    //}

    //pseudo_instr("call %reg, %imm") {
    //  "call %0";
    //}


/********************************************************/
/* Optional properties to optimize compiled simulation  */
/********************************************************/

    //call.is_jump(ac_pc+(disp30<<2));
    //call.delay(1);
    //call.behavior(writeReg(15, ac_pc););
    //
    //jmpl_reg.is_jump(readReg(rs1) + readReg(rs2) - ac_start_addr);
    //jmpl_reg.delay(1);
    //jmpl_reg.behavior(writeReg(rd, ac_pc););
    //
    //jmpl_imm.is_jump(readReg(rs1) + simm13);
    //jmpl_imm.delay(1);
    //jmpl_imm.behavior(writeReg(rd, ac_pc););
    //


    //ba.is_branch(ac_pc+(disp22<<2));
    //ba.cond(1);
    //ba.delay(1);
    //ba.delay_cond(!an);
    //
    //bn.is_branch(ac_pc+(disp22<<2));
    //bn.cond(0);
    //bn.delay(1);
    //bn.delay_cond(!an);
    //
    //bne.is_branch(ac_pc+(disp22<<2));
    //bne.cond(!PSR_icc_z);
    //bne.delay(1);
    //bne.delay_cond(!PSR_icc_z || !an);
    //
    //be.is_branch(ac_pc+(disp22<<2));
    //be.cond(PSR_icc_z);
    //be.delay(1);
    //be.delay_cond(PSR_icc_z || !an);
    //
    //bg.is_branch(ac_pc+(disp22<<2));
    //bg.cond(!(PSR_icc_z ||(PSR_icc_n ^PSR_icc_v)));
    //bg.delay(1);
    //bg.delay_cond(!(PSR_icc_z ||(PSR_icc_n ^PSR_icc_v)) || !an);
    //
    //ble.is_branch(ac_pc+(disp22<<2));
    //ble.cond(PSR_icc_z ||(PSR_icc_n ^PSR_icc_v));
    //ble.delay(1);
    //ble.delay_cond(PSR_icc_z ||(PSR_icc_n ^PSR_icc_v) || !an);
    //
    //bge.is_branch(ac_pc+(disp22<<2));
    //bge.cond(!(PSR_icc_n ^PSR_icc_v));
    //bge.delay(1);
    //bge.delay_cond(!(PSR_icc_n ^PSR_icc_v) || !an);
    //
    //bl.is_branch(ac_pc+(disp22<<2));
    //bl.cond(PSR_icc_n ^PSR_icc_v);
    //bl.delay(1);
    //bl.delay_cond(PSR_icc_n ^PSR_icc_v || !an);
    //
    //bgu.is_branch(ac_pc+(disp22<<2));
    //bgu.cond(!(PSR_icc_c ||PSR_icc_z));
    //bgu.delay(1);
    //bgu.delay_cond(!(PSR_icc_c ||PSR_icc_z) || !an);
    //
    //bleu.is_branch(ac_pc+(disp22<<2));
    //bleu.cond(PSR_icc_c ||PSR_icc_z);
    //bleu.delay(1);
    //bleu.delay_cond(PSR_icc_c ||PSR_icc_z || !an);
    //
    //bcc.is_branch(ac_pc+(disp22<<2));
    //bcc.cond(!PSR_icc_c);
    //bcc.delay(1);
    //bcc.delay_cond(!PSR_icc_c || !an);
    //
    //bcs.is_branch(ac_pc+(disp22<<2));
    //bcs.cond(PSR_icc_c);
    //bcs.delay(1);
    //bcs.delay_cond(PSR_icc_c || !an);
    //
    //bpos.is_branch(ac_pc+(disp22<<2));
    //bpos.cond(!PSR_icc_n);
    //bpos.delay(1);
    //bpos.delay_cond(!PSR_icc_n || !an);
    //
    //bneg.is_branch(ac_pc+(disp22<<2));
    //bneg.cond(PSR_icc_n);
    //bneg.delay(1);
    //bneg.delay_cond(PSR_icc_n || !an);
    //
    //bvc.is_branch(ac_pc+(disp22<<2));
    //bvc.cond(!PSR_icc_v);
    //bvc.delay(1);
    //bvc.delay_cond(!PSR_icc_v || !an);
    //
    //bvs.is_branch(ac_pc+(disp22<<2));
    //bvs.cond(PSR_icc_v);
    //bvs.delay(1);
    //bvs.delay_cond(PSR_icc_v || !an);

  };
};



